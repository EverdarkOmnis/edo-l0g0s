%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 12.0.1%%For: (Edtmun Jasvins) (OSHC)%%Title: (Ottawa.ai)%%CreationDate: 7/20/06 10:25 AM%%BoundingBox: -535 499 -354 644%%HiResBoundingBox: -534.5005 499.7246 -354.4995 643.2788%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (PANTONE 186 CV)%%+ (PANTONE 872 CV)%%+ (PANTONE Process Black CV)%%CMYKCustomColor: 0 0.91 0.76 0.06 (PANTONE 186 CV)%%+ 0 0.79 0.65 0.47 (PANTONE 188 CV)%%+ 0 0 0 0.11 (PANTONE 427 CV)%%+ 0.06 0.09 0.23 0 (PANTONE 468 CV)%%+ 0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV)%%+ 0.4 0.43 0.84 0.08 (PANTONE 872 CV)%%+ 0 0 0 1 (PANTONE Process Black CV)%%+ 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: -82.5 98.5 693.5 694.3999%AI3_DocumentPreview: None%AI5_ArtSize: 1836 792%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -930.5 1030.5 0.5 1265 828 26 1 0 7 73 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-600 11%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 104 8%%BeginData: 18588 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD4DFF7D7DFD045227524B524B4B52FD6EFF7D7D525227FD085152%5175277DFD6BFF7D5927524B525176515251764B766F764B525152A8FD68%FF7D5227514B5151514B514B6F6F938D8D8CB08C934B5152FD66FFA87D27%52517C51764B766FB5B0B08DB58DB58DB593B06F7C51A8FD64FFA8525227%5151524B6F6FB08DB08DB58D938DB58D938DB58D515152FD63FFA87D2751%517651766FB58DB58DB593B58DB593B58DB593B58D93515252FD62FF7D27%277551514B938DB08D938D938D938D938D938D938D938DB04B5227A8FD61%FF5252517C4B768DB58DB58DB593B58DB593B58DB593B58DB593B58D7651%52FD60FF7D275151514B938D938DB58D938DB58D938DB58D938DB58D938D%B58D934B5152FD5FFF522775515293B08DB593B58DB593B58DB593B58DB5%93B58DB593B58DB56F52517DFD5DFFA8282775276F8CB08D938D938D938D%938D938D938D938D938D938D938D938C7551517DFD5CFFA828517C4B938D%B593B58DB593B58DB593B58DB593B58DB593B58DB593B58DB54B7651FD5C%FF7E2751524B938D938DB58D938DB58D938DB58D938DB58D938DB58D938D%B58D938D525152FD5BFFA82751524BB58DB593B58DB593B58DB593B58DB5%93B58DB593B58DB593B58DB58D9351527DFD5AFFA82751514BB08D938D93%8D938D938D938D938D938D938D938D938D938D938D938DB56F514B275253%52FD047DA8FD51FFA85251524BB58DB58DB593B58DB593B58DB593B58DB5%93B58DB593B58DB593B58DB5B0765152275227524B52272727522E7DA8FD%4DFF2E4B524BB08DB58D938DB58D938DB58D938DB58D938DB58D938DB58D%938DB58D938DB04B5127757575517B757551755151272727527DFD49FF52%51764BB58DB58DB593B58DB593B58DB593B58DB593B58DB593B58DB593B5%8DB593B58D765152517B757B757B757B5176757551765127277DA8FD45FF%7D277527938C938D938D938D938D938D938D938D938D938D938D938D938D%938D938D938D8D4B512775517551514B525151F827517551755151272727%A8FD43FF277C51938DB593B58DB593B58DB593B58DB593B58DB593B58DB5%93B58DB593B58DB593B58D765152757C5127F827F8525152F8277576F852%757C75522752A8FD40FF285151758D938DB58D938DB58D938DB58D938DB5%8D938DB58D938DB58D938DB58D938DB58D934B7627755175515127525152%F827F8515127F85151765175272752FD3EFF7D5251528DB593B58DB593B5%8DB593B58DB593B58DB593B58DB593B58DB593B58DB593B58DB593765152%757B517B757B75522727275251522727F87B4B277575512727A8FD3BFFA8%2751526FB08D938D938D938D938D938D938D938D938D938D938D938D938D%938D938D938D938C9351512775517551755175517551755151F827F82751%75F82751755151F87DFD3AFF7D4B7C4BB08DB593B58DB593B58DB593B58D%B593B58DB593B58DB593B58DB593B58DB593B58DB5B07627274B5227524B%52517C517C757B7576517C51522727F85275527576F852FD39FF27512793%8D938DB58D938DB58D938DB58D938DB58D938DB58D938DB58D938DB58D93%8DB58DB56F762027F827F827F827F827F82727514B75757551522727F827%2775F85151752727A8FD36FF525251768DB593B58DB593B58DB593B58DB5%93B58DB593B58DB593B58DB593B58DB58DB093762727F827F827F827F827%F827F827F827F827F852517B517B5152517C5127F876757B2727A8FD34FF%A82751528D938D938D938D938D938D938D938D938D938D938D938D938D93%8D938D938C934B27F827F827F827F827F827F827F827F827F827F827F827%2751517551512727F827277551752727A8FD33FF7D4B7C6FB08DB593B58D%B593B58DB593B58DB593B58DB593B58DB593B58DB593B58D9A2727F827F8%27F827F827F827F827F827F827F827F827F827F827F851517B5127F827F8%527527517B4B27A8FD32FF27514B938D938DB58D938DB58D938DB58D938D%B58D938DB58D938DB58D938DB0934BF827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F82727274B7551275175272751752727FD%0AFF7DFD26FF7E5251768DB593B58DB593B58DB593B58DB593B58DB593B5%8DB593B58DB58DB06F27F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F8272752757B7552FD0427F852757B2752FD09FF2727%53FD24FF524B526FB08D938D938D938D938D938D938D938D938D938D938D%938D938CB04B27F827F827F827F827F827F827F8FD0727F827F827F827F8%27F8274B755175517527754B27F82751514B752059FD08FF7DF827F87DA8%FD21FF517C51B58DB593B58DB593B58DB593B58DB593B58DB593B58DB593%B58DB54B27F827F827F827F827F827F8274B76757C757C757C517C5151F8%27F827F827517B757C757B5151757B5176517C51277576F8A8FD07FFA827%274BF827277DA8FD1DFF845151768D938DB58D938DB58D938DB58D938DB5%8D938DB58D938DB58DB04B27F827F827F827F827F8272776517551755175%51755175517575512727F8275175517551757552F851517551525151F852%5151F8FD08FF52278D936F4BF827277DA8FD1AFF7D51526FB593B58DB593%B58DB593B58DB593B58DB593B58DB593B58DB04B27F827F827F827F827F8%27517B757B757B517C757B517C757B517B757B5127517B517C757B517B51%27F852757B2727F827277B754B52FD07FFA8F875936F8D934B27F8272759%7DFD17FF52514B938C938D938D938D938D938D938D938D938D938D938D93%8DB06F27F827F827F827F827F82751755175517551755175517551755175%5175514B27755175517551755151F827F85151752727F851515251277DFD%07FF52279327274B9A93946F4BF82727527DA8A9FD12FF5251768DB593B5%8DB593B58DB593B58DB593B58DB593B58DB593B59327F827F827F827F827%F852757C757B757C757B757C757B757C757B757C7576277C757B757C757B%757C4B27F827F852757C5176517C277B5152FD07FFA8276F6FF827F8274B%9993936F512727F82727527DA8A8FD0CFFA827526FB08DB58D938DB58D93%8DB58D938DB58D938DB58D938DB58D4BF827F827F827F827F85275755175%5175517551755175517551755175517B275151755175517551755152F827%F827F8755152277527275175F87EFD07FF52279351F827F827F8274B766F%B593934B4B2727F8FD042753537D7DA87DA87DA8525251938DB58DB593B5%8DB593B58DB593B58DB593B58DB593B58D76F827F827F827F827F851757B%757B517C757B517C757B517C757B517C757B5127757B517C757B517C757B%2727F827F827277B5127F827F852755227FD07FFA8F84B9327F827F827F8%27F827204B4B6F9393936F4B512727F827F827F827F827F827515169B58D%938D938D938D938D938D938D938D938D938D938D932727F827F827F827F8%275175517551755175517551755175517551755175512727755175517551%7551755151F827F827F8274B755127F827517551277DFD07FF7DF8934B27%F827F827F827F827F827F82727524B766F9393949393939A93996F9A4B58%51B593B58DB593B58DB593B58DB593B58DB593B58DB593B06F27F827F827%F827F827517B757C757B757C757B757C757B757C757B757C757C277C757B%757C757B757C757B5127F827F827F827517B75524B7C51765152FD08FF27%27932727F827F827F827F827F827F827F827F827F827274B274B4B764B51%4B51514B8DB58D938DB58D938DB58D938DB58D938DB58D938DB58D27F827%F827F827F827277B51755175517551755175517551755175517551754B27%517551755175517551757552F827F827F827F85151754B755127517520A8%FD07FFA8274B93F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827277C6FB08DB593B58DB593B58DB593B58DB593B58DB593B58D%9AF827F827F827F827F876757C757B517C757B517C757B517C757B517C75%7B7552517B517C757B517C757B517B5127F827F827F827F87675512751F8%52755152FD08FF52276F6FF827F827F827F827F827F827F827F827F827F8%27F827F827F827F85151758D938D938D938D938D938D938D938D938D938D%938DB04B27F827F827F827F8515175517551755175517551755175517551%7551755175F8755175517551755175517551752727F827F827F827277551%27F82727755127A8FD08FF2E279376F827F827F827F827F827F827F827F8%27F827F827F827F827F8274B7C6FB58DB593B58DB593B58DB593B58DB593%B58DB593B58D52F827F827F827F827517B757C757B757C757B757C757B75%7C757B757C757B5152757B757C757B757C757B757C5152F827F827F827F8%27517B5127F87C757B27A8FD09FFF8278D51F827F827F827F827F827F827%F827F827F827F827F827F827F85151938D938DB58D938DB58D938DB58D93%8DB58D938DB58D93F827F827F827F827277B517551755175517551755175%5175517551755175754B2775517551755175517B75512727F827F827F827%F827F851517551515152515152FD09FFA9F84B8D52F827F827F827F827F8%27F827F827F827F827F827F827F82751766FB593B58DB593B58DB593B58D%B593B58DB593B58DB56F27F827F827F827F852757C757B517C757B517C75%7B517C757B757C5176757C2776757C757B517C757B5152F827F827F827F8%27F827F827277B51275176F87C5152FD0AFFA8F84B8D4BF827F827F827F8%27F827F827F827F827F827F827F827F851516F8C938D938D938D938D938D%938D938D938D938D938C75F827F827F827F8275175517551755175517551%755175517551752727F84B4B275175517551755175512727A8F827F827F8%27F827F827F8275175F827F827517527FD0BFFA8F8528D52F827F827F827%F827F827F827F827F827F827F827F82751766FB593B58DB593B58DB593B5%8DB593B58DB593B58DB04B27F827F827F827277C757C757B757C757B757C%757B757C757C2752757C2727517B757C757B757B512752FFFF52F827F827%F827F827F827F8527576F827207C75517DFD0BFFA8F84B8D6FF827F827F8%27F827F827F827F827F827F827F827F852516F8DB58D938DB58D938DB58D%938DB58D938DB58D938C75F827F827F827F8275175517551755175517551%755175517B2727517B7575F852757551755175512753FFFFFF7D27F827F8%27F827F827F82727755152F851517B277DFD0CFFA8F82793992027F827F8%27F827F827F827F827F827F827F8274B766FB58DB593B58DB593B58DB593%B58DB593B58DB593B04B27F827F827F827277C757B517C757B517C757B51%7C757B5127517B517C7552517B757B517B512752FD05FF5227F827F827F8%27F827F851757B7576517B755252FD0DFFA8F8276F932727F827F827F827%F827F827F827F827F827F85151758D938D938D938D938D938D938D938D93%8D938D938C4BF827F827F827F82751755175517551755175517551755175%F87551755175517551755175512752FD06FFA8F827F827F827F827F827F8%755175517551754B52FD0FFF52274BB56F27F827F827F827F827F827F827%F827F827277C6FB08DB593B58DB593B58DB593B58DB593B58DB593B04B27%F827F827F827277C757B757C757B757C757B757C757B5127757B757C757B%757C757B512752FD05FFA87DA852F827F827F827F827F827517B757C757B%757C27FD10FF7D27F8758D6F2727F827F827F827F827F827F827F8275176%8D938DB58D938DB58D938DB58D938DB58D938DB58D75F827F827F827F827%517551755175517551755175517551752776757551755175517B512752FD%04FFA8272727FF7D27F827F827F827F827F8527575517B51755127FD11FF%A852F8276F936F52F827F827F827F827F827F82727764BB593B58DB593B5%8DB593B58DB593B58DB593B58DB56F27F827F827F827277B757C757B517C%757B517C757B517C7552277B757B517C757B512752FD04FFA828522727A8%FF2727F827F827F827F827517B7575517C7575F8FD13FFA82727206F9393%4B4BF827F827F827F827F82751528DB58D938D938D938D938D938D938D93%8D938D938C93F827F827F827F82751755175517551755175517551755175%51272775517551754B27F87DFD04FFA8FFFFFFA8A8FF7DF827F827F827F8%27F8515075272727755127FD11FFA8FFFFFFA852F8274B7693B66F764B52%4B4B274B277651948DB58DB593B58DB593B58DB593B58DB593B58DB58D52%F827F827F827F852757C757B757C757B757C757B757C5152272727522752%2727517652FD0CFF27F827F827F827F827517B5127F827517B27FD11FF7D%277DA8FFFFFF5227F820264B6F936F9393938D7651516FB58D938DB58D93%8DB58D938DB58D938DB58D938DB04B27F827F827F8272775517551755175%51755175517527527D7D27515151277651755152FD0CFF5227F827F827F8%27F8515052F827F8767527FD11FFA827F827277DA8FFFFFF7D522727F827%F8272727F85251768DB593B58DB593B58DB593B58DB593B58DB593B58D9A%F827F827F827F827517B517C757B517C757B517B5152FD04FF2776757B75%7B757B27A8FD0CFF2727F827F827F827517B51522752757C27FD12FF5227%4B27F827F85259A8FFFFA8A87D7D527D525927514BB08D938D938D938D93%8D938D938D938D938D938D938C4BF827F827F827F8525175517551755175%51755152A8FD04FFA8277551755175515127FD0CFF52F827F827F827F852%5175517551755127FD13FFF8528D9A6F512727F82727537DA8A8FD04FF7D%515293B593B58DB593B58DB593B58DB593B58DB593B58DB56F27F827F827%F827277C757C757B757C757B757C52FD06FFA8277B757C757B755252A8FD%0AFFA827F827F827F827517B757C757B757C27FD13FF7DF8936F756F9393%754B4B2627F827F827F827F852516F8DB58D938DB58D938DB58D938DB58D%938DB58D938DB52727F827F827F827277551755175517551755152A8FD06%FF7D2775517551755151277DFD06FFA85228A82827F827F827F876757551%7551755127FD14FF272793202727524B9AFD04936F6F6F766F764B7C6FB0%8DB593B58DB593B58DB593B58DB593B58DB593B58D76F827F827F827F827%517B517C757B517C757B5152FD07FF52517B517C757B515252FD05FFA87D%527D2727F827F827F827517B757B517C755227FD14FF7D274B93F827F827%F827274B27764BFD046F2751528D938D938D938D938D938D938D938D938D%938D938D938C4BF827F827F827F827517551755175517551752752FD06FF%A8275175517551754B7DFD05FFA8A8FFFF27F827F827F827277551754B51%51752752FD15FF52279376F827F827F827F827F827F827F827F876519A8D%B593B58DB593B58DB593B58DB593B58DB593B58DB59327F827F827F827F8%51757C757B757C757B757B277DFD04FFA8FF7E51517C757B75767DFD08FF%7DF827F827F827F852757C2727277C755152FD16FFF8278D51F827F827F8%27F827F827F827F82727764BB08DB58D938DB58D938DB58D938DB58D938D%B58D938DB06F27F827F827F827F85151755175517551755175277DFFFF7D%7DFFFF5251517551754B7DFD06FFA827F827F827F827F82751754B27F827%517B277DFD16FFA8F8518D4BF827F827F827F827F827F827F827515293B5%8DB593B58DB593B58DB593B58DB593B58DB593B58DB06F27F827F827F827%F852757B757B517C757B757B277D5927A8FFFFFF5251757C757552FD05FF%A85253FF2E27F827F827F87C75272752F8765127A8FD17FF7DF84B8D27F8%27F827F827F827F827F827F85151758D938D938D938D938D938D938D938D%938D938D938D938DB04B27F827F827F827F85151755175517551755175F8%27A8FD05FF275151755152A8FD08FF27F827F827F8275175277551275151%27FD19FF53F8769327F827F827F827F827F827F827F87C51938DB593B58D%B593B58DB593B58DB593B58DB593B58DB58DB52727F827F827F827F87675%7B757C757B757C757627FD06FFA8277C757B27A8FD08FF2727F827F82751%7B7552277C517C277DFD1AFF52F8759327F827F827F827F827F827F82727%524BB08DB58D938DB58D938DB58D938DB58D938DB58D938DB58D93F827F8%27F827F827F8527575517551755175755152FD06FF7D2775515152FD08FF%52F827F827F8755152F827277551277DFD1BFF52F8769351F827F827F827%F827F827F827515293B58DB593B58DB593B58DB593B58DB593B58DB593B5%8DB58D99F827F827F827F827F876757B517C757B517B5152FD07FF7D277B%7552A8FD07FF7D27F827F8527576F827F852757627FD1DFF52F84B8D6FF8%27F827F827F827F827F85151758D938D938D938D938D938D938D938D938D%938D938D938D938D6FF827F827F827F827F875517551755175517527FD08%FF5327754B52FD07FFA8F827F82751752751512727752752FD1EFF7DF827%6FB64B27F827F827F827F827F87C51938DB593B58DB593B58DB593B58DB5%93B58DB593B58DB593B58D52F827F827F827F827277B757C757B757B5127%275252A8A8FD04FF7D277527A8FD06FFA827F827277C7576517C51527527%A8FD1FFFA827274B936F4BF827F827F827F827277B4B8D8DB58D938DB58D%938DB58D938DB58D938DB58D938DB58DB08D4BF827F827F827F827517551%75517527516F6F2727F82727A8FFFFFFA8272727FFFF7D52522727F827F8%51515227274B75515127FD22FF5227F87693934B27F827F827F82751764B%B08DB593B58DB593B58DB593B58DB593B58DB593B58DB593B09327F827F8%27F827F852757B757B512727766F9A939A6F4BF8277EFFFFFF7D2752A8F8%27F827F827F8527576F827F852757B277DFD23FFA852F8274B938D934B4B%2727F82751526FB08D938D938D938D938D938D938D938D938D938D938D93%8DB06F27F827F827F827F87551752727F827F827F82727759393272752FF%FFFFA8A95227F827F827F8275175274B272727754B27FD26FFA85227F827%4B9A93B693936F5251528DB593B58DB593B58DB593B58DB593B58DB593B5%8DB593B58DB56F27F827F827F827517B2727F827F827F827F827F8274BB6%6F2752FD04FF27F827F827F827517B7576517C205275277DFD26FFA8FFFF%7D2727F827F827274BF852514B8DB58D938DB58D938DB58D938DB58D938D%B58D938DB58D938C932727F827F827F8762727F827F827F827F827F827F8%27F8936F2752FFFF7DF827F827F8274B75515227515152515127FD27FF53%27A8FD04FF7D7D52522727277651758DB593B58DB593B58DB593B58DB593%B58DB593B58DB58D934B7C2727F827F8272727F827F827F827F827F827F8%27F827F89A4B27A8FF5227F827F827277B5127F8272775757C27A8FD27FF%A827F82727527DFD07FF27754B6F8C938D938D938D938D938D938D938D93%8D938D938CB54B512727F827F827F827F827F827F827F827F827F827F827%F8272793F87DFF27F827F827277551272727F82751752752FD29FF52274B%4BF827F827275252535228F87C5176B0B58DB593B58DB593B58DB593B58D%B593B58DB56F525127F827F827F827F827F827F827F82727524B766F9A6F%996F9A8D4B52A8F827F827277B757C517C512751755127A8FD2AFFF84B8D%936F754B4BFD05274B2775276F8D938DB58D938DB58D938DB58D938DB58D%938D525127F827F827F827F827F827F82727756F936F754B4B274B274B4B%934B272727F8272775755127272775277551277DFD2BFFA8F8768D764B9A%939393B593939352277B27768DB58DB593B58DB593B58DB593B58DB58D76%5152F827F827F827F827F82727766F936F762727F827F827F827F827F827%F827F8274B7B5152F827F8527576754B52FD2DFF52F86F6F27F827F82720%272027F8272775276F8C938D938D938D938D938D938D938DB54B512727F8%27F827F827F84B6F936F512027F827F827F827F827F827F827F827F82727%755175275227272775515127FD2FFF52F8936F27F827F827F827F827F827%277C51768DB593B58DB593B58DB593B58DB593525127F827F827F8274B9A%93762727F827F827F827F827F827F827F827F827F827517B51524B767552%F87C755220FD30FFA827F8936F27F827F827F827F827F827277B276F8DB5%8D938DB58D938DB58D938D6F5151F827F82720756F934B27F827F827F827%F827F827F827F827F827F827F85275752727F827F8754B515051F8A8FD31%FFA827F893934BF827F827F827F827F827277C51768DB593B58DB593B58D%B593B06F7C5127F84B6F936F52F827F827F827F827F827F827F827F827F8%27F827517B517B75525152F827517C7552F8A8FD33FFA827F86F8D75F827%F827F827F827F8272775514B8CB58D938D938D938D938D6F515127939375%2727F827F827F827F827F827F827F827F827F82727515175515127274B75%4B2751755151F8A8FFFFFF7D527DA8FD2FFF52F85293934B27F827F827F8%27F827277C517693B58DB593B58DB593B54B7C4B9A4B27F8272727F827F8%27F827F827F827F827F8272752517B757B7552F827F8277552277B755227%A8FFFFFF52277D5252A8FD2FFF7DF8274B936F512127F827F827F827F851%515193B08DB58D938DB58D525127F827277651755152274BFD0727514B76%517551754B512752517527272775517B512727FD04FF7D275252595252FD%31FF5227F87593936F76FD0427F827F852515293B08DB593B58D93517627%52757B757B7575517B757B757B757B757B757B517651765127F827F85275%27F87C757B512752FD05FF2EA8275227FF27FD32FF7D52F82726756F936F%936F936F93275151516FB08D938D93695251515075517551515175515227%5151754B5127755127F827F8515152F82751752775507527277DFD06FF52%7E52F87DFF28A8FD34FF7D52F827F82727514B524B4BF852515293B593B5%8D9A5152517B757B5152F827F8525152F82751762727F8525176F827277C%5127517C757B75522752A8FD07FF525252A8527D52FD37FFAF7D7D272EFD%0527522751514B8DB58DB04B522751517551755176272727755127F82751%75F827F8755127F851512751755175512727A8FD0AFF27277D5227FD44FF%275251768DB58D765152757B757B757B757B757B5152F827517B5127F876%752727767575517B515127527DFD0DFF7D7D7DFD45FFA827514B8D8C934B%51F827275151755175517551512752517551274B75517551755075515127%27277DFD58FF7D515293B04B7C27A8A85227272752517C757B757B757B75%7C757B757C757B51522727277DA8FD5AFF52524B936F525152FD04FF7D7D%FD05275127524B514B52274BFD04272E7DA8FD5DFF7D51766F525151A8FD%08FFA87D7DFD07527D527D7DFD62FF27512751512752FD78FF7D52515251%5152FD78FF7D275175512752FD78FFA827517627527DFD78FF7D27F85252%84FD3DFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (NHL SHIELD 1)(NHL SHIELD 1) 0 2 Bd[<000000000000000000000000000000000001010101010101010101010101010101020202020202020202020203030303030303030303040404040404040405050505050505050606060606060606070707070707080808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F10101010111111111112121212121313131314141414141515151516161616171717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F1F20202020212121222222222323232424242425252526262626272727282828282929292A2A2A2B2B2B2C2C2C2C2D2D2D2E2E2E2F2F2F3030303131313232323333333434343435353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D3E3E3F3F3F4040404141414242424343444444454545464647474748484849494A4A4A4B4B4C4C4C4D4D4D4E4E4F4F4F5050515151525253535354545555555656575757585859595A5A5A5B5B5C5C5C5D5D5E5E5F5F5F60606161616262636364646565656666676768686869696A6A6B6B6C6C6C6D6D6E6E6F6F707070717172727373747475757676><00000000000000000000000000000000000000000000010101010101010101010101010101010101010102020202020202020202020202020203030303030303030303030304040404040404040404040505050505050505050506060606060606060606070707070707070707080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101111111111111212121212121313131313131414141414141515151515161616161616171717171718181818181819191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202021212121212222222222232323232424242424252525252626262626272727272828282829292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F3030303031313131323232323333333334343434353535353636363637373737383838393939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F40404040414141424242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101020202020202020202020202020202020203030303030303030303030303030404040404040404040404040505050505050505050505050606060606060606060607070707070707070707080808080808080808080909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0F0F0F0F0F0F0F10101010101010101111111111111112121212121213131313131313141414141414141515151515151616161616161717171717171818181818181919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F2020202020202121212121222222222223232323232424242424242525252525262626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030313131313132323232333333333334343434353535353536363636373737373838383839393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505060606060606060606060606060606060606060707070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101111111111111111111111111212121212121212121212121313131313131313131313131414141414141414141414141515151515151515151515151616161616161616161616171717171717><FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F8F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F4F4F4F4F3F3F3F2F2F2F2F1F1F1F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E8E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDEDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEADADACABABAAA9A9A8A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9999989797969595949393929190908F8E8E8D8C8B8B8A89888887868685848383828180807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A6968676666656463626261605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2C2B2A2A292827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 86.5168 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 86.5168 Bs1 0 66.2921 38.76 %_BS%_1 0 66.2921 38.76 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 2)(NHL SHIELD 2) 0 2 Bd[<000000000000000000000000000000000001010101010101010101010101010101020202020202020202020203030303030303030303040404040404040405050505050505050606060606060606070707070707080808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F10101010111111111112121212121313131314141414141515151516161616171717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F1F20202020212121222222222323232424242425252526262626272727282828282929292A2A2A2B2B2B2C2C2C2C2D2D2D2E2E2E2F2F2F3030303131313232323333333434343435353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D3E3E3F3F3F4040404141414242424343444444454545464647474748484849494A4A4A4B4B4C4C4C4D4D4D4E4E4F4F4F5050515151525253535354545555555656575757585859595A5A5A5B5B5C5C5C5D5D5E5E5F5F5F60606161616262636364646565656666676768686869696A6A6B6B6C6C6C6D6D6E6E6F6F707070717172727373747475757676><00000000000000000000000000000000000000000000010101010101010101010101010101010101010102020202020202020202020202020203030303030303030303030304040404040404040404040505050505050505050506060606060606060606070707070707070707080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101111111111111212121212121313131313131414141414141515151515161616161616171717171718181818181819191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202021212121212222222222232323232424242424252525252626262626272727272828282829292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F3030303031313131323232323333333334343434353535353636363637373737383838393939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F40404040414141424242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101020202020202020202020202020202020203030303030303030303030303030404040404040404040404040505050505050505050505050606060606060606060607070707070707070707080808080808080808080909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0F0F0F0F0F0F0F10101010101010101111111111111112121212121213131313131313141414141414141515151515151616161616161717171717171818181818181919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F2020202020202121212121222222222223232323232424242424242525252525262626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030313131313132323232333333333334343434353535353536363636373737373838383839393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505060606060606060606060606060606060606060707070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101111111111111111111111111212121212121212121212121313131313131313131313131414141414141414141414141515151515151515151515151616161616161616161616171717171717><FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F8F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F4F4F4F4F3F3F3F2F2F2F2F1F1F1F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E8E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDEDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEADADACABABAAA9A9A8A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9999989797969595949393929190908F8E8E8D8C8B8B8A89888887868685848383828180807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A6968676666656463626261605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2C2B2A2A292827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 78.6517 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 78.6517 Bs1 0 66.2921 24.7191 %_BS%_1 0 66.2921 24.7191 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 3)(NHL SHIELD 3) 0 2 Bd[<000000000000000000000000000000000000000000000000010101010101010101010101010101010101010202020202020202020202020202030303030303030303030303040404040404040404040505050505050505050606060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0C0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F1010101010101111111111121212121213131313131414141414151515151616161616171717171718181818191919191A1A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020202121212122222222232323242424242525252526262627272727282828292929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2E2F2F2F303030313131323232323333333434343535353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F4040404141424242434343444444454545464647474748484849494A4A4A4B4B4B4C4C4D4D4D4E4E4E4F4F505050515152525253535454545555565656575758585859595A5A5A5B5B5C5C5D5D5D5E5E5F5F5F60606161626262636364646565656666676768686869696A6A6B6B6C6C6C6D6D6E6E6F6F707070717172727373747475757676><00000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101020202020202020202020202020202020203030303030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606070707070707070707070808080808080808080909090909090909090A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101111111111111112121212121213131313131313141414141414151515151515161616161617171717171718181818181819191919191A1A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F20202020202121212121222222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2B2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F303030303031313131323232323333333334343434353535363636363737373738383838393939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F40404041414141424242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><0000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020303030303030303030303030303030304040404040404040404040404040405050505050505050505050505060606060606060606060607070707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F10101010101010101111111111111112121212121212131313131313131414141414141415151515151515161616161616171717171717171818181818181919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F20202020202021212121212222222222222323232323242424242425252525252526262626262727272727282828282829292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2D2D2D2D2D2E2E2E2E2E2F2F2F2F3030303030313131313132323232333333333334343434353535353636363636373737373838383839393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404040404040505050505050505050505050505050505050505050506060606060606060606060606060606060606060707070707070707070707070707070707070708080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010111111111111111111111111111212121212121212121212121313131313131313131313131414141414141414141414141515151515151515151515151616161616161616161616171717171717><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F6F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0EFEFEFEFEEEEEEEDEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D8D8D8D7D7D6D6D5D5D5D4D4D3D3D2D2D1D1D0D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBEBEBDBDBCBCBBBBBABAB9B8B8B7B7B6B6B5B4B4B3B3B2B2B1B0B0AFAFAEADADACACABAAAAA9A9A8A7A7A6A6A5A4A4A3A2A2A1A0A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8C8C8B8A8A89888887868585848383828180807F7E7D7D7C7B7A7A797877777675747473727171706F6E6E6D6C6B6A6A6968676666656463626261605F5E5E5D5C5B5A5A59585756555554535251504F4F4E4D4C4B4A4A49484746454443434241403F3E3D3C3C3B3A39383736353433333231302F2E2D2C2B2A29282827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 93.2584 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 93.2584 Bs1 0 68.4848 19.6629 %_BS%_1 0 68.4848 19.6629 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 4)(NHL SHIELD 4) 0 2 Bd[<000000000000000000000000000000000001010101010101010101010101010101020202020202020202020203030303030303030303040404040404040405050505050505050606060606060606070707070707080808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F10101010111111111112121212121313131314141414141515151516161616171717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F1F20202020212121222222222323232424242425252526262626272727282828282929292A2A2A2B2B2B2C2C2C2C2D2D2D2E2E2E2F2F2F3030303131313232323333333434343435353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D3E3E3F3F3F4040404141414242424343444444454545464647474748484849494A4A4A4B4B4C4C4C4D4D4D4E4E4F4F4F5050515151525253535354545555555656575757585859595A5A5A5B5B5C5C5C5D5D5E5E5F5F5F60606161616262636364646565656666676768686869696A6A6B6B6C6C6C6D6D6E6E6F6F707070717172727373747475757676><00000000000000000000000000000000000000000000010101010101010101010101010101010101010102020202020202020202020202020203030303030303030303030304040404040404040404040505050505050505050506060606060606060606070707070707070707080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101111111111111212121212121313131313131414141414141515151515161616161616171717171718181818181819191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202021212121212222222222232323232424242424252525252626262626272727272828282829292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F3030303031313131323232323333333334343434353535353636363637373737383838393939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F40404040414141424242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101020202020202020202020202020202020203030303030303030303030303030404040404040404040404040505050505050505050505050606060606060606060607070707070707070707080808080808080808080909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0F0F0F0F0F0F0F10101010101010101111111111111112121212121213131313131313141414141414141515151515151616161616161717171717171818181818181919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F2020202020202121212121222222222223232323232424242424242525252525262626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030313131313132323232333333333334343434353535353536363636373737373838383839393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505060606060606060606060606060606060606060707070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101111111111111111111111111212121212121212121212121313131313131313131313131414141414141414141414141515151515151515151515151616161616161616161616171717171717><FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F8F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F4F4F4F4F3F3F3F2F2F2F2F1F1F1F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E8E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDEDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEADADACABABAAA9A9A8A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9999989797969595949393929190908F8E8E8D8C8B8B8A89888887868685848383828180807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A6968676666656463626261605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2C2B2A2A292827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 78.6517 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 78.6517 Bs1 0 66.2921 24.7191 %_BS%_1 0 66.2921 24.7191 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 5)(NHL SHIELD 5) 0 4 Bd[<000000000000000001010101010101010102020202020202030303030303040404040404050505050505060606060607070707070808080809090909090A0A0A0A0B0B0B0B0B0C0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F1010101011111111121212131313131414141415151516161616171717181818181919191A1A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1E1F1F1F2020202121212222222323232424242525252626262727272828282929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F3030313131323232333333343435353536363637373738383939393A3A3A3B3B3C3C3C3D3D3E3E3E3F3F3F404041414142424343434444454545464646474748484849494A4A4B4B4B4C4C4D4D4D4E4E4F4F4F5050515151525253535454545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5F5F60606061616262636363646465656666676767686869696A6A6B6B6B6C6C6D6D6E6E6F6F707070717172727373747475757676><000000000000000000000001010101010101010101010102020202020202020203030303030303030304040404040404040505050505050506060606060606070707070707070808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0C0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F101010101011111111111112121212121313131313141414141415151515161616161617171717171818181818191919191A1A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F1F20202020212121212222222223232323232424242425252525262626262727272728282828292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2F2F2F2F303030303131313132323232333333343434343535353536363637373737383838383939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F404040414141414242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><0000000000000000000000000101010101010101010101010101020202020202020202020202030303030303030303030404040404040404040505050505050505060606060606060607070707070707070808080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0B0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F1010101010101011111111111112121212121313131313131414141414141515151515151616161616171717171717181818181819191919191A1A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202020212121212122222222222323232323242424242425252525252626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2D2D2D2D2D2E2E2E2E2F2F2F2F2F303030303131313132323232323333333334343434343535353536363636373737373838383838393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A19191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181717171717171717171717171717171717171717171717171717><0000000000010101010102020202030303030404040505050606060707070808080909090A0A0B0B0B0C0C0D0D0E0E0E0F0F1010111111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F2020212122222323242525262627272829292A2A2B2C2C2D2D2E2F2F303031323233333435353637373839393A3B3B3C3C3D3E3E3F4040414242434445454647474849494A4B4B4C4D4E4E4F50505152535354555556575858595A5B5B5C5D5E5E5F606161626364646566676768696A6A6B6C6D6E6E6F707172727374757576777879797A7B7C7D7E7E7F8081828283848586878788898A8B8C8C8D8E8F9091919293949596979798999A9B9C9D9E9E9FA0A1A2A3A4A5A5A6A7A8A9AAABACADADAEAFB0B1B2B3B4B5B6B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCCCDCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFFFFFFFEFEFEFEFEFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F8F7F7F7F6F6F6F5F5F4F4F4F3F3F2F2F1F1F1F0F0EFEFEEEEEEEDEDECECEBEBEAEAE9E9E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0DFDFDEDEDDDDDCDCDBDADAD9D9D8D8D7D6D6D5D5D4D3D3D2D2D1D0D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A7A7A6A5A4A4A3A2A1A1A09F9E9E9D9C9B9B9A999898979695959493929191908F8E8D8D8C8B8A8A8988878686858483828181807F7E7D7D7C7B7A7978787776757473737271706F6E6E6D6C6B6A6968686766656463626161605F5E5D5C5B5A5A59585756555453525251504F4E4D4C4B4A49494847464544434241403F3F3E3D3C3B3A39383736353433323231302F2E2D2C2B2A292827262524232221201F1E1D1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>3 %_Br0000.1102 %_Br<7676757574747373727271717070706F6F6E6E6D6D6C6C6B6B6B6A6A696968686767676666656564646363636262616160605F5F5F5E5E5D5D5C5C5B5B5B5A5A5959585858575756565555555454535352525251515050504F4F4E4E4D4D4D4C4C4B4B4B4A4A494949484847474646464545444444434342424241414040403F3F3E3E3E3D3D3D3C3C3B3B3B3A3A3939393838373737363636353534343433333332323131313030302F2F2F2E2E2D2D2D2C2C2C2B2B2B2A2A2929292828282727272626262525252424242323232222222121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1B1A1A1A191919181818181717171616161515151514141413131312121212111111101010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0B0A0A0A0A0909090908080808080707070706060606060505050504040404040403030303030202020202020101010101010101000000000000><4D4D4C4C4C4C4B4B4B4A4A4A494949494848484747474646464645454544444443434343424242414141414040403F3F3F3F3E3E3E3D3D3D3D3C3C3C3B3B3B3B3A3A3A393939393838383837373736363636353535343434343333333332323231313131303030302F2F2F2F2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A2A292929292828282727272726262626252525252424242423232323222222222221212121202020201F1F1F1F1E1E1E1E1D1D1D1D1C1C1C1C1C1B1B1B1B1A1A1A1A19191919191818181817171717171616161615151515151414141414131313131212121212111111111110101010100F0F0F0F0F0E0E0E0E0E0D0D0D0D0D0C0C0C0C0C0C0B0B0B0B0B0A0A0A0A0A0A090909090908080808080807070707070706060606060606050505050505040404040404040303030303030303020202020202020201010101010101010101000000000000000000><3E3E3E3D3D3D3D3C3C3C3C3B3B3B3B3A3A3A3A393939393838383838373737373636363635353535343434343433333333323232323131313131303030302F2F2F2F2E2E2E2E2E2D2D2D2D2C2C2C2C2C2B2B2B2B2A2A2A2A2A29292929282828282827272727272626262625252525252424242424232323232222222222212121212120202020201F1F1F1F1F1E1E1E1E1E1D1D1D1D1D1C1C1C1C1C1B1B1B1B1B1A1A1A1A1A191919191918181818181717171717171616161616151515151514141414141413131313131312121212121111111111111010101010100F0F0F0F0F0F0E0E0E0E0E0E0D0D0D0D0D0D0C0C0C0C0C0C0B0B0B0B0B0B0A0A0A0A0A0A0A09090909090909080808080808080707070707070706060606060606050505050505050504040404040404040303030303030303030202020202020202020201010101010101010101010100000000000000000000><17171717171717171717171717171717171717171717171717171818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818181818191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F40414243444445464748494A4B4C4D4E4F4F50515253545556575858595A5B5C5D5E5F6061616263646566676868696A6B6C6D6E6F6F70717273747575767778797A7B7B7C7D7E7F8080818283848585868788898A8A8B8C8D8E8E8F9091929293949596969798999A9A9B9C9D9E9E9FA0A1A2A2A3A4A5A5A6A7A8A8A9AAABABACADAEAEAFB0B1B1B2B3B4B4B5B6B7B7B8B9B9BABBBCBCBDBEBEBFC0C1C1C2C3C3C4C5C5C6C7C7C8C9C9CACBCBCCCDCDCECFCFD0D1D1D2D3D3D4D5D5D6D6D7D8D8D9DADADBDBDCDDDDDEDEDFE0E0E1E1E2E2E3E4E4E5E5E6E6E7E7E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F4F5F5F6F6F7F7F7F8F8F9F9F9FAFAFAFBFBFCFCFCFCFDFDFDFEFEFEFEFFFFFFFF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCACAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBBBAB9B8B7B6B5B4B3B2B1B0B0AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9E9D9C9B9A9998979796959493929190908F8E8D8C8B8A8A89888786858484838281807F7F7E7D7C7B7A7A7978777675757473727171706F6E6D6D6C6B6A696968676665656463626161605F5E5D5D5C5B5A5A595857575655545453525151504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292928272726252524242322222121201F1F1E1E1D1D1C1B1B1A1A191918181716161515141413131212111110100F0F0E0E0D0D0C0C0B0B0B0A0A090908080807070606060505050404030303030202020101010100000000>3 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 100 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 100 Bs0 0 0 0.11 (PANTONE 427 CV) 0 3 61.2245 75.2809 %_BS%_0 0 0 0.11 (PANTONE 427 CV) 0 3 61.2245 75.2809 Bs0 0 0 0.11 (PANTONE 427 CV) 0 3 50 25.2809 %_BS%_0 0 0 0.11 (PANTONE 427 CV) 0 3 50 25.2809 Bs0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 40.3226 0 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 40.3226 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 6)(NHL SHIELD 6) 0 2 Bd[<000000000000000000000000000000000001010101010101010101010101010101020202020202020202020203030303030303030303040404040404040405050505050505050606060606060606070707070707080808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F10101010111111111112121212121313131314141414141515151516161616171717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F1F20202020212121222222222323232424242425252526262626272727282828282929292A2A2A2B2B2B2C2C2C2C2D2D2D2E2E2E2F2F2F3030303131313232323333333434343435353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D3E3E3F3F3F4040404141414242424343444444454545464647474748484849494A4A4A4B4B4C4C4C4D4D4D4E4E4F4F4F5050515151525253535354545555555656575757585859595A5A5A5B5B5C5C5C5D5D5E5E5F5F5F60606161616262636364646565656666676768686869696A6A6B6B6C6C6C6D6D6E6E6F6F707070717172727373747475757676><00000000000000000000000000000000000000000000010101010101010101010101010101010101010102020202020202020202020202020203030303030303030303030304040404040404040404040505050505050505050506060606060606060606070707070707070707080808080808080809090909090909090A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F0F1010101010101111111111111212121212121313131313131414141414141515151515161616161616171717171718181818181819191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F2020202021212121212222222222232323232424242424252525252626262626272727272828282829292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F3030303031313131323232323333333334343434353535353636363637373737383838393939393A3A3A3A3B3B3B3C3C3C3C3D3D3D3D3E3E3E3F3F3F3F40404040414141424242424343434444444445454546464646474747484848494949494A4A4A4B4B4B4C4C4C4C4D4D><000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101020202020202020202020202020202020203030303030303030303030303030404040404040404040404040505050505050505050505050606060606060606060607070707070707070707080808080808080808080909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0F0F0F0F0F0F0F10101010101010101111111111111112121212121213131313131313141414141414141515151515151616161616161717171717171818181818181919191919191A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F2020202020202121212121222222222223232323232424242424242525252525262626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F2F30303030313131313132323232333333333334343434353535353536363636373737373838383839393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505060606060606060606060606060606060606060707070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101111111111111111111111111212121212121212121212121313131313131313131313131414141414141414141414141515151515151515151515151616161616161616161616171717171717><FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F8F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F4F4F4F4F3F3F3F2F2F2F2F1F1F1F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E8E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDEDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEADADACABABAAA9A9A8A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9999989797969595949393929190908F8E8E8D8C8B8B8A89888887868685848383828180807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A6968676666656463626261605F5E5D5D5C5B5A5958585756555453535251504F4E4D4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2C2B2A2A292827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 51.1236 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 51.1236 Bs1 0 66.2921 15.1685 %_BS%_1 0 66.2921 15.1685 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 7)(NHL SHIELD 7) 0 4 Bd[0.46270.3020.24310.090202 %_Br<0000010102020303040405050606060707080809090A0A0B0B0C0C0C0D0D0E0E0F0F101011111212131313141415151616171718181919191A1A1B1B1C1C1D1D1E1E1F1F1F2020212122222323242425252526262727282829292A2A2B2B2B2C2C2D2D2E2E2F2F303031313232323333343435353636373738383839393A3A3B3B3C3C3D3D3E3E3E3F3F4040414142424343444444454546464747484849494A4A4A4B4B4C4C4D4D4E4E4F4F505051515152525353545455555656575757585859595A5A5B5B5C5C5D5D5D5E5E5F5F606061616262636363646465656666676768686969696A6A6B6B6C6C6D6D6E6E6F6F707070717172727373747475757676><00000101010202020203030304040405050505060606070707080808080909090A0A0A0B0B0B0B0C0C0C0D0D0D0E0E0E0E0F0F0F1010101111111212121213131314141415151515161616171717181818181919191A1A1A1B1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F1F2020202121212222222223232324242425252525262626272727282828282929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F2F3030303131313232323233333334343435353535363636373737383838383939393A3A3A3B3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F3F4040404141414242424243434344444445454545464646474747484848484949494A4A4A4B4B4B4C4C4C4C4D4D><000000010101010202020203030303040404040505050506060606070707070808080809090909090A0A0A0A0B0B0B0B0C0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F10101010111111111212121212131313131414141415151515161616161717171718181818191919191A1A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F20202020212121212222222223232323232424242425252525262626262727272728282828292929292A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F2F30303030313131313232323233333333343434343535353535363636363737373738383838393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E><000000000000010101010101010101010102020202020202020202020303030303030303030303040404040404040404040405050505050505050505050606060606060606060606060707070707070707070707080808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F101010101010101010101011111111111111111111111112121212121212121212121313131313131313131313141414141414141414141415151515151515151515151616161616161616161616171717171717><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>2 %_Br10 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 78.0899 100 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 78.0899 100 Bs0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 56.1798 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 56.1798 Bs1 0 50 34.8315 %_BS%_1 0 50 34.8315 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (NHL SHIELD 8)(NHL SHIELD 8) 0 2 Bd[<0000010102020303040405050606060707080809090A0A0B0B0B0C0C0D0D0E0E0F0F10101011111212131314141515151616171718181919191A1A1B1B1C1C1D1D1E1E1E1F1F20202121222222232324242525252626272728282929292A2A2B2B2C2C2D2D2D2E2E2F2F3030303131323233333334343535363636373738383939393A3A3B3B3C3C3C3D3D3E3E3E3F3F4040414141424243434344444545464646474748484849494A4A4A4B4B4C4C4D4D4D4E4E4F4F4F505051515152525353535454555555565656575758585859595A5A5A5B5B5C5C5C5D5D5D5E5E5F5F5F606060616162626263636364646565656666666767676868686969696A6A6B6B6B6C6C6C6D6D6D6E6E6E6F6F6F707070707171717272727373737374747475757575767676><00000101010202020203030304040405050505060606070707070808080909090A0A0A0A0B0B0B0C0C0C0D0D0D0D0E0E0E0F0F0F0F101010111111121212121313131414141415151516161616171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F2020202021212122222222232323242424242525252526262627272727282828292929292A2A2A2A2B2B2B2C2C2C2C2D2D2D2D2E2E2E2E2F2F2F3030303031313131323232323333333434343435353535363636363737373738383838393939393A3A3A3A3B3B3B3B3C3C3C3C3D3D3D3D3E3E3E3E3F3F3F3F40404040414141414242424243434343434444444445454545464646464647474747484848484849494949494A4A4A4A4A4B4B4B4B4B4C4C4C4C4C4C4D4D4D4D><000000010101010202020203030303040404040505050506060606070707070708080808090909090A0A0A0A0B0B0B0B0C0C0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F10101010101111111112121212131313131314141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F20202020202121212121222222222323232323242424242525252525262626262627272727282828282829292929292A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2E2F2F2F2F2F303030303031313131313232323232333333333334343434343535353535363636363637373737373738383838383939393939393A3A3A3A3A3A3B3B3B3B3B3B3C3C3C3C3C3C3D3D3D3D3D3D3D3E3E3E3E3E><000000000000010101010101010101010102020202020202020202020303030303030303030303030404040404040404040404050505050505050505050505060606060606060606060607070707070707070707070708080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F1010101010101010101010101011111111111111111111111111121212121212121212121212121313131313131313131313131313141414141414141414141414141414151515151515151515151515151515161616161616161616161616161616161717171717171717171717><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A4A3A2A1A09F9E9D9C9B9A99989796959594939291908F8E8D8C8B8A89888887868584838281807F7E7D7D7C7B7A79787776757473737271706F6E6D6C6B6A6A69686766656463626261605F5E5D5C5B5A5A59585756555453535251504F4E4D4D4C4B4A4948474746454443424241403F3E3D3D3C3B3A3938383736353433333231302F2F2E2D2C2B2B2A292827272625242323222120201F1E1D1D1C1B1A1A191817171615141413121111100F0F0E0D0D0C0B0B0A0909080707060505040403020201010000>2 %_Br[0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 53.9326 %_BS%_0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 3 50 53.9326 Bs1 0 45.4545 11.24 %_BS%_1 0 45.4545 11.24 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc1 1 1 1 k(C=100 M=100 Y=100 K=100)Pc0 0.91 0.76 0.06 (PANTONE 186 CV) 0 x(PANTONE 186 CV)Pc0 0.79 0.65 0.47 (PANTONE 188 CV) 0 x(PANTONE 188 CV)Pc0 0 0 0.11 (PANTONE 427 CV) 0 x(PANTONE 427 CV)Pc0.06 0.09 0.23 0 (PANTONE 468 CV) 0 x(PANTONE 468 CV)Pc0.4627 0.302 0.2431 0.0902 (PANTONE 8180 CV) 0 x(PANTONE 8180 CV)Pc0.4 0.43 0.84 0.08 (PANTONE 872 CV) 0 x(PANTONE 872 CV)Pc0 0 0 1 (PANTONE Process Black CV) 0 x(PANTONE Process Black CV)PcBb2 (NHL SHIELD 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 1)PcBb2 (NHL SHIELD 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 2)PcBb2 (NHL SHIELD 3) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 3)PcBb2 (NHL SHIELD 4) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 4)PcBb2 (NHL SHIELD 5) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 5)PcBb2 (NHL SHIELD 6) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 6)PcBb2 (NHL SHIELD 7) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 7)PcBb2 (NHL SHIELD 8) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(NHL SHIELD 8)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A1 Au0 A*u1 D0 O1 g0 J 0 j 1 w 4 M []0 d0 XR-377.7334 552.5244 m-383.6201 550.8818 L-378.252 554.8184 L-378.2607 557.0557 L-376.2056 558.0439 L-385.9829 578.748 L-390.9038 575.7856 -394.5435 570.6914 -397.623 567.8564 C-397.3008 559.3843 -392.7573 558.8081 -391.5801 558.8081 C-393.8008 547.6553 -385.7329 540.2808 Y-386.1509 539.6133 L-391.7373 540.623 -398.209 548.9316 V-408.9448 562.6338 L-411.7852 566.2593 -415.0874 563.3052 v-418.3232 560.4111 -416.0239 557.626 -415.7505 557.3179 C-410.1694 551.0781 L-407.8467 550.7407 -406.2451 553.3975 -405.8662 554.0601 C-405.7407 552.7217 -406.0957 550.5181 -409.1963 549.9907 C-407.7188 548.3389 -406.0991 546.5269 -407.2319 543.9492 C-401.4028 542.9971 -389.6104 541.0742 -388.5791 530.77 C-387.896 530.4326 L-383.8169 541.6514 L-376.6455 542.7627 L-378.3423 549.9028 L-377.7334 552.5244 Lf0 D-388.3096 567.9087 m-390.8286 567.0981 L-387.8926 569.5068 L-384.3667 570.7407 L-384.1777 571.0791 L-383.397 570.6504 L-384.9067 570.0068 -384.6318 569.5942 v-384.3564 569.1807 -384.291 568.1284 Y-383.1333 567.2471 L-388.3096 567.9087 Lf-379.7334 558.6665 m-377.3604 557.7593 L-383.7881 556.2114 L-379.7334 558.6665 Lf*Uu0.4 0.43 0.84 0.08 (PANTONE 872 CV) 0 x-425.7153 534.8691 m-426.7827 536.1777 L-438.0068 525.5898 -428.9023 514.147 -440.5415 504.9458 c-441.1943 504.4126 -442.291 503.8862 Y-438.8921 509.2695 -443.2476 514.6055 v-446.9902 519.1895 -456.4131 525.0527 -465.3242 535.9702 c-489.0215 565 -482.6553 605.1719 -458.0962 625.2192 c-437.728 641.8457 -411.9829 640.645 Y-418.2505 624.4795 -418.355 613.1553 -418.1597 609.2476 C-417.6035 609.3267 -417.0454 609.3979 -416.4829 609.4565 C-416.5557 615.2554 -415.7798 627.5225 -409.4502 642.3696 C-437.4907 644.2646 -459.187 626.5547 v-485.1079 605.3955 -490.3569 563.9102 -466.6597 534.8799 c-457.6699 523.8667 -447.9604 517.6514 -444.5835 513.5151 c-439.1533 506.8623 -447.1313 500.7788 Y-442.6216 501.0356 -439.1772 503.8462 v-427.5806 513.3125 -435.5913 525.7612 -425.7153 534.8691 Cf*u1 D-411.7407 620.5952 m-412.7617 620.5952 -413.7759 620.5659 -414.7832 620.5122 C-415.4404 615.9258 -415.5854 612.1392 -415.5708 609.5405 C-414.3076 609.6465 -413.0308 609.7036 -411.7407 609.7036 c-402.8491 609.7036 -394.5645 607.1245 -387.5747 602.6885 C-386.4673 603.1963 -385.2832 603.6431 -384.0044 604.0137 C-384.7095 604.376 -385.5137 604.8838 -386.4321 605.6143 C-385.5596 606.0537 -383.9185 605.771 V-381.6924 605.7671 -382.2549 607.8315 Y-382.2515 607.8291 -382.2485 607.8262 -382.2441 607.8242 C-382.7915 609.2578 -382.5767 610.1367 Y-378.4634 606.8311 -379.04 604.7085 Y-379.3438 603.7993 -378.2222 602.8589 Y-379.1924 603.708 -379.9878 603.5298 V-380.002 603.4561 -380.0195 603.3828 -380.0513 603.3125 c-380.2729 602.8184 -380.4697 602.3286 -380.6563 601.8403 C-380.2437 601.8872 -379.5156 601.8892 -378.5322 601.5752 C-376.3291 601.2656 -376.6006 603.3882 Y-376.5977 603.3838 -376.5947 603.3804 -376.5908 603.3774 C-376.9346 604.8721 -376.5996 605.7129 Y-372.9839 601.8735 -373.8486 599.8486 Y-374.2744 598.9897 -373.2905 597.9058 Y-374.4346 599.2314 -375.3403 598.6963 V-377.3115 597.9932 -380.7832 601.5049 V-381.1826 600.416 -381.502 599.3447 -381.7476 598.2988 C-372.4365 590.0234 -366.5645 577.9639 -366.5645 564.5273 c-366.5645 539.5771 -386.7905 519.3511 -411.7407 519.3511 c-415.9873 519.3511 -420.0967 519.9385 -423.9941 521.0342 C-426.6021 519.9219 -428.9106 518.9771 -431.0947 518.1743 C-431.375 516.2324 -431.7251 514.2813 -432.3374 512.3643 C-425.9614 509.8447 -419.0122 508.4595 -411.7407 508.4595 c-380.7759 508.4595 -355.6724 533.562 -355.6724 564.5273 c-355.6724 595.4927 -380.7759 620.5952 -411.7407 620.5952 cf0 D-412.771 615.3057 m-404.3164 617.5063 -404.502 614.75 v-404.6826 612.0854 -412.771 615.3057 Yf-405.0181 612.2529 m-404.395 613.0068 -402.7813 613.4111 V-400.7437 614.3076 -402.0918 615.9678 Y-402.0854 615.9678 -402.0811 615.9663 -402.0771 615.9663 C-403.1582 617.0566 -403.3154 617.9478 Y-398.2207 616.583 -397.8882 614.4092 Y-397.8018 613.4536 -396.3921 613.0469 Y-398.0625 613.5723 -398.5503 612.6416 V-399.9146 610.917 -405.0181 612.2529 Vf-398.5356 610.9082 m-397.8149 611.5688 -396.1602 611.7461 V-394.0186 612.3516 -395.1235 614.1836 Y-395.1191 614.1821 -395.1157 614.1792 -395.1089 614.1787 C-396.0288 615.4072 -396.0615 616.3125 Y-391.2051 614.2573 -391.1758 612.0581 Y-391.2202 611.1011 -389.8838 610.5039 Y-391.4639 611.2554 -392.0781 610.3994 V-393.6655 608.8794 -398.5356 610.9082 Vf-385.9727 607.2866 m-387.7583 605.9995 -392.2998 608.6797 V-391.4956 609.2354 -389.8311 609.1831 V-387.6294 609.4873 -388.4707 611.4541 Y-388.4653 611.4526 -388.46 611.4487 -388.4565 611.4487 C-389.1963 612.793 -389.104 613.6919 Y-384.5776 610.9873 -384.853 608.8047 Y-385.0293 607.8618 -383.7881 607.0859 Y-385.251 608.0498 -385.9727 607.2866 Vf-361.5396 579.2769 m-361.5396 579.2734 -361.5381 579.2671 -361.5361 579.2637 C-361.0425 580.7163 -360.3159 581.2549 Y-359.2607 576.0879 -361.0596 574.8188 Y-361.875 574.3149 -361.6099 572.873 Y-361.8838 574.6045 -362.9365 574.6226 V-365.0879 575.0732 -366.1729 580.2358 V-365.2192 580.0171 -364.1362 578.751 V-362.4253 577.3296 -361.5396 579.2769 Yf-376.2378 597.2114 m-375.2788 597.3945 -373.7754 596.6753 V-371.6387 596.0664 -371.6128 598.2041 Y-371.6104 598.2012 -371.6094 598.1968 -371.605 598.1943 C-371.7412 599.7212 -371.2935 600.5068 Y-368.2417 596.2041 -369.374 594.3179 Y-369.9155 593.5283 -369.0918 592.3169 Y-370.043 593.7881 -371.0132 593.3828 V-373.1636 592.9253 -376.2378 597.2114 Vf-372.1074 592.0381 m-371.1318 592.0874 -369.7451 591.1675 V-367.7095 590.2686 -367.3892 592.3809 Y-367.3877 592.3765 -367.3857 592.373 -367.3823 592.3696 C-367.3052 593.9009 -366.7529 594.6201 Y-364.3271 589.9355 -365.7075 588.2246 Y-366.354 587.5176 -365.7075 586.2036 Y-366.4438 587.7905 -367.459 587.5249 V-369.6533 587.3691 -372.1074 592.0381 Vf-368.7295 586.3438 m-367.7568 586.2578 -366.5098 585.1533 V-364.6182 583.9814 -364.0103 586.0332 Y-364.0088 586.0273 -364.0083 586.0234 -364.0044 586.0195 C-363.7163 587.5264 -363.0713 588.1606 Y-361.3145 583.186 -362.9199 581.6826 Y-363.6572 581.0723 -363.1963 579.6812 Y-363.7061 581.3555 -364.7505 581.2305 V-366.9453 581.3799 -368.7295 586.3438 Vf-425.8384 516.4097 m-417.188 517.4097 -417.7085 514.7905 v-418.2495 512.0796 -425.8384 516.4097 Yf-411.2368 513.3916 m-412.1245 511.3809 -417.3984 511.3936 V-417.0127 512.2109 -415.687 512.9829 V-415.6895 512.9834 -415.6963 512.9834 -415.7007 512.9834 C-413.9678 514.2349 -415.6992 515.6309 V-417.1538 516.4438 -417.5562 517.3359 Y-412.2817 517.292 -411.4146 515.271 Y-411.186 514.2446 -409.438 514.3169 Y-410.9023 514.2925 -411.2368 513.3916 Vf-404.1431 513.9116 m-404.7451 511.7959 -409.9707 511.0801 V-409.7021 511.9419 -408.4956 512.8896 V-408.5 512.8906 -408.5039 512.8882 -408.5103 512.8882 C-406.9644 514.3677 -408.874 515.5112 V-410.4243 516.1152 -410.9478 516.9409 Y-405.7178 517.6279 -404.5801 515.7461 Y-404.2109 514.7612 -402.4897 515.0762 Y-403.9375 514.8472 -404.1431 513.9116 Vf-397.1899 515.4038 m-397.4927 513.2251 -402.5708 511.7939 V-402.4253 512.6846 -401.3574 513.7896 V-401.3638 513.7896 -401.3677 513.7886 -401.3726 513.7886 C-400.0488 515.4658 -402.0952 516.3359 V-403.7158 516.7192 -404.3486 517.4653 Y-399.2617 518.8687 -397.8755 517.1602 Y-397.377 516.2363 -395.7129 516.7832 Y-397.1138 516.3589 -397.1899 515.4038 Vf-390.5107 517.8408 m-390.5093 515.6387 -395.3403 513.5229 V-395.3169 514.4277 -394.416 515.6675 V-394.4194 515.6675 -394.4243 515.6646 -394.4277 515.6636 C-393.3491 517.5073 -395.498 518.0864 V-397.1538 518.2422 -397.8823 518.895 Y-393.0386 520.9854 -391.4307 519.4844 Y-390.8091 518.6387 -389.2354 519.4106 Y-390.5664 518.7964 -390.5107 517.8408 Vf-384.229 521.1772 m-383.9248 518.998 -388.417 516.2334 V-388.52 517.1323 -387.7969 518.4858 V-387.8022 518.4844 -387.8071 518.481 -387.811 518.479 C-386.9956 520.4546 -389.2017 520.7319 V-390.8657 520.6582 -391.6772 521.2026 Y-387.1699 523.9419 -385.3687 522.6797 Y-384.6367 521.9258 -383.1851 522.9082 Y-384.4175 522.1157 -384.229 521.1772 Vf-378.4697 525.3481 m-377.8677 523.2314 -381.9341 519.8726 V-382.1606 520.7505 -381.6328 522.1895 V-381.6348 522.1875 -381.6421 522.1841 -381.6436 522.1816 C-381.1104 524.2529 -383.334 524.2207 V-384.9712 523.9185 -385.8486 524.3457 Y-381.7646 527.6812 -379.8062 526.6777 Y-378.9756 526.0342 -377.6748 527.2065 Y-378.7871 526.252 -378.4697 525.3481 Vf-373.3408 530.2739 m-372.4521 528.2607 -376.0166 524.375 V-376.3638 525.2095 -376.0371 526.7095 V-376.0396 526.707 -376.0449 526.7046 -376.0498 526.7007 C-375.8032 528.8242 -378.002 528.4883 V-379.582 527.9595 -380.5127 528.2637 Y-376.9248 532.1313 -374.8457 531.4072 Y-373.936 530.8833 -372.8096 532.2261 Y-373.7788 531.1265 -373.3408 530.2739 Vf-368.9404 535.8613 m-367.7827 533.9902 -370.7778 529.6475 V-371.2344 530.4292 -371.1196 531.959 V-371.124 531.9551 -371.125 531.9507 -371.1294 531.9482 C-371.1816 534.0859 -373.3105 533.4487 V-374.8037 532.708 -375.7661 532.8799 Y-372.7485 537.2051 -370.5908 536.7769 Y-369.6152 536.3843 -368.6821 537.8672 Y-369.4932 536.6445 -368.9404 535.8613 Vf-366.3149 535.5952 m-366.876 536.3052 -366.9741 537.8379 V-366.9775 537.833 -366.978 537.8271 -366.9819 537.8242 C-367.3271 539.9346 -369.3511 539.0083 V-370.7241 538.0698 -371.7036 538.1064 Y-369.3101 542.8076 -367.1143 542.6812 Y-366.0933 542.4272 -365.3779 544.0239 Y-366.0078 542.7031 -365.3535 542.0039 V-363.9487 540.3115 -366.3149 535.5952 Vf-362.8262 541.8145 m-363.4785 542.4443 -363.7778 543.9497 V-363.7783 543.9448 -363.7783 543.9399 -363.7808 543.938 C-364.4038 545.9824 -366.2856 544.7979 V-367.5254 543.686 -368.499 543.5928 Y-366.7476 548.5684 -364.5532 548.7334 Y-363.5083 548.6162 -363.0103 550.2935 Y-363.4609 548.8994 -362.7207 548.292 V-361.1035 546.7993 -362.8262 541.8145 Vf-360.1899 548.4404 m-360.9165 548.9785 -361.4121 550.4321 V-361.4141 550.4253 -361.4141 550.4233 -361.4175 550.417 C-362.3032 552.3638 -364.0117 550.9395 V-365.0947 549.6743 -366.0483 549.4546 Y-364.9678 554.6167 -362.8159 555.0713 Y-361.7646 555.0898 -361.4917 556.8218 Y-361.7544 555.3789 -360.9399 554.8755 V-359.1416 553.6084 -360.1899 548.4404 Vf-360.9229 562.3354 m-362.3389 562.3354 -363.4878 563.4839 -363.4878 564.9004 c-363.4878 566.3159 -362.3389 567.4668 -360.9229 567.4668 c-359.5049 567.4668 -358.3564 566.3159 -358.3564 564.9004 c-358.3564 563.4839 -359.5049 562.3354 -360.9229 562.3354 cf*U-426.8062 593.0254 m-431.771 588.584 -445.3403 571.1899 -428.1021 552.7715 C-421.4346 545.6475 L-415.7534 539.5024 -418.2305 534.2773 Y-410.4004 541.2817 L-406.0195 545.2012 -407.7671 547.1538 -409.8115 549.4399 C-416.3667 556.7676 L-419.6128 560.3657 -415.6382 563.9209 v-411.6792 567.4629 -408.2969 563.1455 Y-397.5596 549.4409 L-392.2227 542.6299 -387.4795 540.938 Y-389.5698 543.2808 -393.8931 549.8057 -392.5234 558.0723 C-394.9609 558.397 -398.104 560.9482 -398.4092 567.1699 C-404.2593 562.3198 -409.3081 563.8843 -411.9087 566.791 c-414.3179 569.4849 -413.9331 574.7695 -411.146 577.2632 c-409.1782 579.0234 -406.3667 578.8672 -404.6064 576.8994 c-404.4512 576.7266 -404.3145 576.5361 -404.1836 576.3423 C-402.458 583.2212 -400.5596 590.1025 -396.6792 595.4585 C-402.3965 600.168 -416.3423 602.3853 -426.8062 593.0254 cf-410.3389 576.3608 m-412.6895 574.2578 -412.8774 569.6914 -411.0054 567.5986 c-408.4487 564.7402 -403.8838 563.8779 -398.6338 568.5742 c-394.7754 572.0259 -389.2632 580.3037 -381.667 581.8301 C-386.2075 592.0029 -380.9556 603.7188 V-397.7813 600.5615 -400.479 586.0151 -403.9751 572.1821 C-404.2861 574.7246 -405.5088 576.0918 v-406.8638 577.6064 -408.8936 577.6528 -410.3389 576.3608 cfUu0 0.91 0.76 0.06 (PANTONE 186 CV) 0 x-441.0352 553.6367 m-449.7373 564.2983 -452.6592 585.3911 -435.0039 599.8027 c-428.7227 604.9307 -422.5132 607.2393 -418.6211 608.2451 C-420.3438 620.0664 -412.8271 640.0708 V-437.8071 641.0391 -457.7334 624.7739 v-481.8379 605.0972 -488.5762 565.3643 -464.8794 536.3335 c-455.9941 525.4482 -446.6665 519.7021 -442.8027 514.9688 c-438.8052 510.0718 -440.9956 505.3125 Y-429.3618 514.4048 -438.8076 525.4546 -427.168 536.6494 C-441.0352 553.6367 Lf-408.1079 542.4199 m-409.5308 540.918 L-396.6421 539.498 -393.1509 535.3711 -392.2148 532.3408 C-393.3062 532.6484 -394.7046 532.8789 -396.4448 532.8789 c-407.8022 532.8789 -418.6147 526.7876 -430.5557 522.1206 C-430.6465 521.4927 -430.731 520.8608 -430.8154 520.2266 C-420.6953 523.8975 -408.4897 531.2168 -396.4448 531.2168 c-392.0205 531.2168 -390.2124 529.5903 Y-390.1914 533.3799 -391.5186 540.2744 -408.1079 542.4199 Cf-481.0684 563.0425 m-481.1963 563.6436 -481.3164 564.2451 -481.4277 564.8486 C-509.8911 564.0059 -523.4277 585.3271 -527.8931 594.418 C-519.8071 591.3359 -501.2148 585.27 -482.0337 586.1401 C-481.9556 586.7529 -481.8677 587.3647 -481.7725 587.9746 C-506.7715 586.7446 -531.3525 597.7827 Y-518.4434 561.7554 -481.0684 563.0425 Vf-470.3169 538.2534 m-488.7231 538.9736 -498.8643 551.9785 -502.8579 558.5977 C-497.7065 557.1421 -488.5942 555.0938 -479.0078 555.4971 C-479.2075 556.0938 -479.4009 556.6924 -479.584 557.2935 C-493.4893 556.8442 -506.5498 561.6602 Y-495.6963 536.6006 -468.9746 536.4102 V-469.4326 537.0195 -469.8818 537.6333 -470.3169 538.2534 Cf-478.418 529.7148 m-474.2222 528.8257 -468.0469 528.001 -462.8672 529.2607 C-463.3472 529.7642 -463.8267 530.2788 -464.3052 530.8052 C-472.3521 529.3203 -482.7119 532.6987 Y-472.5757 513.4326 -448.2998 515.9502 V-448.8857 516.4707 -449.5259 517.0244 -450.2085 517.6113 C-465.4604 516.644 -474.3657 524.6973 -478.418 529.7148 CfUu*u1 D0 0 0 1 (PANTONE Process Black CV) 0 x-364.9277 522.397 m-367.5142 522.397 -369.6099 520.3008 -369.6099 517.7148 c-369.6099 515.1294 -367.5142 513.0332 -364.9277 513.0332 c-362.3428 513.0332 -360.2471 515.1294 -360.2471 517.7148 c-360.2471 520.3008 -362.3428 522.397 -364.9277 522.397 cf0 D-364.9277 514.0366 m-366.9595 514.0366 -368.6069 515.6841 -368.6069 517.7148 c-368.6069 519.7466 -366.9595 521.394 -364.9277 521.394 c-362.8975 521.394 -361.25 519.7466 -361.25 517.7148 c-361.25 515.6841 -362.8975 514.0366 -364.9277 514.0366 cf*U*u1 D-363.0059 518.8018 m-363.0059 519.6782 -363.7168 520.3887 -364.5938 520.3887 C-366.8511 520.3906 L-366.8511 515.04 L-365.8472 515.04 L-365.8472 517.2134 L-365.1274 517.2134 L-364.1133 515.04 L-363.0059 515.04 L-364.0615 517.3057 L-363.4468 517.5249 -363.0059 518.1118 -363.0059 518.8018 cf0 D-364.5938 518.2178 m-365.8472 518.2178 L-365.8472 519.3862 L-364.5938 519.3862 L-364.271 519.3862 -364.0098 519.1245 -364.0098 518.8018 c-364.0098 518.479 -364.271 518.2178 -364.5938 518.2178 Cf*U*u1 D-411.7407 621.7686 m-412.7012 621.7686 -413.6563 621.7437 -414.605 621.6973 C-413.6328 627.8364 -411.7427 635.2754 -408.1548 643.165 C-437.1743 645.6606 -459.7441 627.2368 v-471.4922 617.6475 -478.8032 604.2383 -481.4561 589.8262 C-508.9434 588.4585 -534.5005 601.1855 Y-522.3608 560.0449 -480.667 561.2705 V-480.4907 560.5371 -480.3052 559.8057 -480.1045 559.0771 C-494.8794 558.6855 -509.8989 564.8286 Y-499.3525 534.0405 -467.5918 534.6338 V-467.5083 534.5308 -467.4277 534.4253 -467.3438 534.3218 c-466.814 533.6719 -466.2778 533.0381 -465.7397 532.417 C-474.7881 531.2241 -486.3999 535.8076 Y-476.1802 510.2681 -446.5557 514.3369 V-446.0483 513.8403 -445.6123 513.3794 -445.2671 512.9575 c-440.6846 507.3438 -446.3242 502.2192 -449.938 499.7368 C-443.3145 499.3311 -438.6211 503.1636 v-435.5518 505.668 -433.8042 508.4141 -432.7256 511.2554 C-426.228 508.6934 -419.1484 507.2861 -411.7407 507.2861 c-380.1274 507.2861 -354.4995 532.9141 -354.4995 564.5273 c-354.4995 596.1401 -380.1274 621.7686 -411.7407 621.7686 cf0 D-531.3525 597.7827 m-506.7715 586.7446 -481.7725 587.9746 V-481.8677 587.3647 -481.9556 586.7529 -482.0337 586.1401 C-501.2148 585.27 -519.8071 591.3359 -527.8931 594.418 C-523.4277 585.3271 -509.8911 564.0059 -481.4277 564.8486 C-481.3164 564.2451 -481.1963 563.6436 -481.0684 563.0425 C-518.4434 561.7554 -531.3525 597.7827 Yf-506.5498 561.6602 m-493.4893 556.8442 -479.584 557.2935 V-479.4009 556.6924 -479.2075 556.0938 -479.0078 555.4971 C-488.5942 555.0938 -497.7065 557.1421 -502.8579 558.5977 C-498.8643 551.9785 -488.7231 538.9736 -470.3169 538.2534 C-469.8818 537.6333 -469.4326 537.0195 -468.9746 536.4102 C-495.6963 536.6006 -506.5498 561.6602 Yf-482.7119 532.6987 m-472.3521 529.3203 -464.3052 530.8052 V-463.8267 530.2788 -463.3472 529.7642 -462.8672 529.2607 C-468.0469 528.001 -474.2222 528.8257 -478.418 529.7148 C-474.3657 524.6973 -465.4604 516.644 -450.2085 517.6113 C-449.5259 517.0244 -448.8857 516.4707 -448.2998 515.9502 C-472.5757 513.4326 -482.7119 532.6987 Yf-439.1772 503.8462 m-442.6216 501.0356 -447.1313 500.7788 Y-439.1533 506.8623 -444.5835 513.5151 v-447.9604 517.6514 -457.6699 523.8667 -466.6597 534.8799 c-490.3569 563.9102 -485.1079 605.3955 -459.187 626.5547 c-437.4907 644.2646 -409.4502 642.3696 Y-415.7798 627.5225 -416.5557 615.2554 -416.4829 609.4565 C-417.0454 609.3979 -417.6035 609.3267 -418.1597 609.2476 C-418.355 613.1553 -418.2505 624.4795 -411.9829 640.645 C-437.728 641.8457 -458.0962 625.2192 v-482.6553 605.1719 -489.0215 565 -465.3242 535.9702 c-456.4131 525.0527 -446.9902 519.1895 -443.2476 514.6055 c-438.8921 509.2695 -442.291 503.8862 Y-441.1943 504.4126 -440.5415 504.9458 v-428.9023 514.147 -438.0068 525.5898 -426.7827 536.1777 C-425.7153 534.8691 L-435.5913 525.7612 -427.5806 513.3125 -439.1772 503.8462 cf-380.9556 603.7188 m-386.2075 592.0029 -381.667 581.8301 Y-389.2632 580.3037 -394.7754 572.0259 -398.6338 568.5742 c-403.8838 563.8779 -408.4487 564.7402 -411.0054 567.5986 c-412.8774 569.6914 -412.6895 574.2578 -410.3389 576.3608 c-408.8936 577.6528 -406.8638 577.6064 -405.5088 576.0918 c-404.2861 574.7246 -403.9751 572.1821 Y-400.479 586.0151 -397.7813 600.5615 -380.9556 603.7188 Cf-378.252 554.8184 m-383.6201 550.8818 L-377.7334 552.5244 L-378.3423 549.9028 L-376.6455 542.7627 L-383.8169 541.6514 L-387.896 530.4326 L-388.5791 530.77 L-389.6104 541.0742 -401.4028 542.9971 -407.2319 543.9492 C-406.0991 546.5269 -407.7188 548.3389 -409.1963 549.9907 C-406.0957 550.5181 -405.7407 552.7217 -405.8662 554.0601 C-406.2451 553.3975 -407.8467 550.7407 -410.1694 551.0781 C-415.7505 557.3179 L-416.0239 557.626 -418.3232 560.4111 -415.0874 563.3052 c-411.7852 566.2593 -408.9448 562.6338 Y-398.209 548.9316 L-391.7373 540.623 -386.1509 539.6133 Y-385.7329 540.2808 L-393.8008 547.6553 -391.5801 558.8081 V-392.7573 558.8081 -397.3008 559.3843 -397.623 567.8564 C-394.5435 570.6914 -390.9038 575.7856 -385.9829 578.748 C-376.2056 558.0439 L-378.2607 557.0557 L-378.252 554.8184 Lf-409.5308 540.918 m-408.1079 542.4199 L-391.5186 540.2744 -390.1914 533.3799 -390.2124 529.5903 C-392.0205 531.2168 -396.4448 531.2168 v-408.4897 531.2168 -420.6953 523.8975 -430.8154 520.2266 C-430.731 520.8608 -430.6465 521.4927 -430.5557 522.1206 C-418.6147 526.7876 -407.8022 532.8789 -396.4448 532.8789 c-394.7046 532.8789 -393.3062 532.6484 -392.2148 532.3408 C-393.1509 535.3711 -396.6421 539.498 -409.5308 540.918 Cf-404.1836 576.3423 m-404.3145 576.5361 -404.4512 576.7266 -404.6064 576.8994 c-406.3667 578.8672 -409.1782 579.0234 -411.146 577.2632 c-413.9331 574.7695 -414.3179 569.4849 -411.9087 566.791 c-409.3081 563.8843 -404.2593 562.3198 -398.4092 567.1699 C-398.104 560.9482 -394.9609 558.397 -392.5234 558.0723 C-393.8931 549.8057 -389.5698 543.2808 -387.4795 540.938 C-392.2227 542.6299 -397.5596 549.4409 V-408.2969 563.1455 L-411.6792 567.4629 -415.6382 563.9209 v-419.6128 560.3657 -416.3667 556.7676 Y-409.8115 549.4399 L-407.7671 547.1538 -406.0195 545.2012 -410.4004 541.2817 C-418.2305 534.2773 L-415.7534 539.5024 -421.4346 545.6475 V-428.1021 552.7715 L-445.3403 571.1899 -431.771 588.584 -426.8062 593.0254 c-416.3423 602.3853 -402.3965 600.168 -396.6792 595.4585 C-400.5596 590.1025 -402.458 583.2212 -404.1836 576.3423 Cf-442.8027 514.9688 m-446.6665 519.7021 -455.9941 525.4482 -464.8794 536.3335 c-488.5762 565.3643 -481.8379 605.0972 -457.7334 624.7739 c-437.8071 641.0391 -412.8271 640.0708 Y-420.3438 620.0664 -418.6211 608.2451 Y-422.5132 607.2393 -428.7227 604.9307 -435.0039 599.8027 c-452.6592 585.3911 -449.7373 564.2983 -441.0352 553.6367 C-427.168 536.6494 L-438.8076 525.4546 -429.3618 514.4048 -440.9956 505.3125 C-438.8052 510.0718 -442.8027 514.9688 vf-411.7407 508.4595 m-419.0122 508.4595 -425.9614 509.8447 -432.3374 512.3643 C-431.7251 514.2813 -431.375 516.2324 -431.0947 518.1743 C-428.9106 518.9771 -426.6021 519.9219 -423.9941 521.0342 C-420.0967 519.9385 -415.9873 519.3511 -411.7407 519.3511 c-386.7905 519.3511 -366.5645 539.5771 -366.5645 564.5273 c-366.5645 577.9639 -372.4365 590.0234 -381.7476 598.2988 C-381.502 599.3447 -381.1826 600.416 -380.7832 601.5049 C-377.3115 597.9932 -375.3403 598.6963 Y-374.4346 599.2314 -373.2905 597.9058 Y-374.2744 598.9897 -373.8486 599.8486 V-372.9839 601.8735 -376.5996 605.7129 V-376.9346 604.8721 -376.5908 603.3774 V-376.5947 603.3804 -376.5977 603.3838 -376.6006 603.3882 C-376.3291 601.2656 -378.5322 601.5752 V-379.5156 601.8892 -380.2437 601.8872 -380.6563 601.8403 C-380.4697 602.3286 -380.2729 602.8184 -380.0513 603.3125 c-380.0195 603.3828 -380.002 603.4561 -379.9878 603.5298 C-379.1924 603.708 -378.2222 602.8589 Y-379.3438 603.7993 -379.04 604.7085 V-378.4634 606.8311 -382.5767 610.1367 V-382.7915 609.2578 -382.2441 607.8242 V-382.2485 607.8262 -382.2515 607.8291 -382.2549 607.8315 C-381.6924 605.7671 -383.9185 605.771 V-385.5596 606.0537 -386.4321 605.6143 Y-385.5137 604.8838 -384.7095 604.376 -384.0044 604.0137 C-385.2832 603.6431 -386.4673 603.1963 -387.5747 602.6885 C-394.5645 607.1245 -402.8491 609.7036 -411.7407 609.7036 c-413.0308 609.7036 -414.3076 609.6465 -415.5708 609.5405 C-415.5854 612.1392 -415.4404 615.9258 -414.7832 620.5122 C-413.7759 620.5659 -412.7617 620.5952 -411.7407 620.5952 c-380.7759 620.5952 -355.6724 595.4927 -355.6724 564.5273 c-355.6724 533.562 -380.7759 508.4595 -411.7407 508.4595 cf*U-396.3921 613.0469 m-397.8018 613.4536 -397.8882 614.4092 V-398.2207 616.583 -403.3154 617.9478 V-403.1582 617.0566 -402.0771 615.9663 V-402.0811 615.9663 -402.0854 615.9678 -402.0918 615.9678 C-400.7437 614.3076 -402.7813 613.4111 V-404.395 613.0068 -405.0181 612.2529 Y-399.9146 610.917 -398.5503 612.6416 Y-398.0625 613.5723 -396.3921 613.0469 Yf-389.8838 610.5039 m-391.2202 611.1011 -391.1758 612.0581 V-391.2051 614.2573 -396.0615 616.3125 V-396.0288 615.4072 -395.1089 614.1787 V-395.1157 614.1792 -395.1191 614.1821 -395.1235 614.1836 C-394.0186 612.3516 -396.1602 611.7461 V-397.8149 611.5688 -398.5356 610.9082 Y-393.6655 608.8794 -392.0781 610.3994 Y-391.4639 611.2554 -389.8838 610.5039 Yf-384.853 608.8047 m-384.5776 610.9873 -389.104 613.6919 V-389.1963 612.793 -388.4565 611.4487 V-388.46 611.4487 -388.4653 611.4526 -388.4707 611.4541 C-387.6294 609.4873 -389.8311 609.1831 V-391.4956 609.2354 -392.2998 608.6797 Y-387.7583 605.9995 -385.9727 607.2866 Y-385.251 608.0498 -383.7881 607.0859 Y-385.0293 607.8618 -384.853 608.8047 Vf-371.0132 593.3828 m-370.043 593.7881 -369.0918 592.3169 Y-369.9155 593.5283 -369.374 594.3179 V-368.2417 596.2041 -371.2935 600.5068 V-371.7412 599.7212 -371.605 598.1943 V-371.6094 598.1968 -371.6104 598.2012 -371.6128 598.2041 C-371.6387 596.0664 -373.7754 596.6753 V-375.2788 597.3945 -376.2378 597.2114 Y-373.1636 592.9253 -371.0132 593.3828 Yf-367.459 587.5249 m-366.4438 587.7905 -365.7075 586.2036 Y-366.354 587.5176 -365.7075 588.2246 V-364.3271 589.9355 -366.7529 594.6201 V-367.3052 593.9009 -367.3823 592.3696 V-367.3857 592.373 -367.3877 592.3765 -367.3892 592.3809 C-367.7095 590.2686 -369.7451 591.1675 V-371.1318 592.0874 -372.1074 592.0381 Y-369.6533 587.3691 -367.459 587.5249 Yf-364.7505 581.2305 m-363.7061 581.3555 -363.1963 579.6812 Y-363.6572 581.0723 -362.9199 581.6826 V-361.3145 583.186 -363.0713 588.1606 V-363.7163 587.5264 -364.0044 586.0195 V-364.0083 586.0234 -364.0088 586.0273 -364.0103 586.0332 C-364.6182 583.9814 -366.5098 585.1533 V-367.7568 586.2578 -368.7295 586.3438 Y-366.9453 581.3799 -364.7505 581.2305 Yf-364.1362 578.751 m-365.2192 580.0171 -366.1729 580.2358 Y-365.0879 575.0732 -362.9365 574.6226 Y-361.8838 574.6045 -361.6099 572.873 Y-361.875 574.3149 -361.0596 574.8188 V-359.2607 576.0879 -360.3159 581.2549 V-361.0425 580.7163 -361.5361 579.2637 V-361.5381 579.2671 -361.5396 579.2734 -361.5396 579.2769 C-362.4253 577.3296 -364.1362 578.751 Vf-404.502 614.75 m-404.3164 617.5063 -412.771 615.3057 Y-404.6826 612.0854 -404.502 614.75 vf-411.4146 515.271 m-412.2817 517.292 -417.5562 517.3359 V-417.1538 516.4438 -415.6992 515.6309 V-413.9678 514.2349 -415.7007 512.9834 Y-415.6963 512.9834 -415.6895 512.9834 -415.687 512.9829 C-417.0127 512.2109 -417.3984 511.3936 Y-412.1245 511.3809 -411.2368 513.3916 Y-410.9023 514.2925 -409.438 514.3169 Y-411.186 514.2446 -411.4146 515.271 Vf-404.5801 515.7461 m-405.7178 517.6279 -410.9478 516.9409 V-410.4243 516.1152 -408.874 515.5112 V-406.9644 514.3677 -408.5103 512.8882 Y-408.5039 512.8882 -408.5 512.8906 -408.4956 512.8896 C-409.7021 511.9419 -409.9707 511.0801 Y-404.7451 511.7959 -404.1431 513.9116 Y-403.9375 514.8472 -402.4897 515.0762 Y-404.2109 514.7612 -404.5801 515.7461 Vf-397.8755 517.1602 m-399.2617 518.8687 -404.3486 517.4653 V-403.7158 516.7192 -402.0952 516.3359 V-400.0488 515.4658 -401.3726 513.7886 Y-401.3677 513.7886 -401.3638 513.7896 -401.3574 513.7896 C-402.4253 512.6846 -402.5708 511.7939 Y-397.4927 513.2251 -397.1899 515.4038 Y-397.1138 516.3589 -395.7129 516.7832 Y-397.377 516.2363 -397.8755 517.1602 Vf-391.4307 519.4844 m-393.0386 520.9854 -397.8823 518.895 V-397.1538 518.2422 -395.498 518.0864 V-393.3491 517.5073 -394.4277 515.6636 Y-394.4243 515.6646 -394.4194 515.6675 -394.416 515.6675 C-395.3169 514.4277 -395.3403 513.5229 Y-390.5093 515.6387 -390.5107 517.8408 Y-390.5664 518.7964 -389.2354 519.4106 Y-390.8091 518.6387 -391.4307 519.4844 Vf-385.3687 522.6797 m-387.1699 523.9419 -391.6772 521.2026 V-390.8657 520.6582 -389.2017 520.7319 V-386.9956 520.4546 -387.811 518.479 Y-387.8071 518.481 -387.8022 518.4844 -387.7969 518.4858 C-388.52 517.1323 -388.417 516.2334 Y-383.9248 518.998 -384.229 521.1772 Y-384.4175 522.1157 -383.1851 522.9082 Y-384.6367 521.9258 -385.3687 522.6797 Vf-379.8062 526.6777 m-381.7646 527.6812 -385.8486 524.3457 V-384.9712 523.9185 -383.334 524.2207 V-381.1104 524.2529 -381.6436 522.1816 Y-381.6421 522.1841 -381.6348 522.1875 -381.6328 522.1895 C-382.1606 520.7505 -381.9341 519.8726 Y-377.8677 523.2314 -378.4697 525.3481 Y-378.7871 526.252 -377.6748 527.2065 Y-378.9756 526.0342 -379.8062 526.6777 Vf-374.8457 531.4072 m-376.9248 532.1313 -380.5127 528.2637 V-379.582 527.9595 -378.002 528.4883 V-375.8032 528.8242 -376.0498 526.7007 Y-376.0449 526.7046 -376.0396 526.707 -376.0371 526.7095 C-376.3638 525.2095 -376.0166 524.375 Y-372.4521 528.2607 -373.3408 530.2739 Y-373.7788 531.1265 -372.8096 532.2261 Y-373.936 530.8833 -374.8457 531.4072 Vf-370.5908 536.7769 m-372.7485 537.2051 -375.7661 532.8799 V-374.8037 532.708 -373.3105 533.4487 V-371.1816 534.0859 -371.1294 531.9482 Y-371.125 531.9507 -371.124 531.9551 -371.1196 531.959 C-371.2344 530.4292 -370.7778 529.6475 Y-367.7827 533.9902 -368.9404 535.8613 Y-369.4932 536.6445 -368.6821 537.8672 Y-369.6152 536.3843 -370.5908 536.7769 Vf-365.3779 544.0239 m-366.0933 542.4272 -367.1143 542.6812 V-369.3101 542.8076 -371.7036 538.1064 V-370.7241 538.0698 -369.3511 539.0083 V-367.3271 539.9346 -366.9819 537.8242 Y-366.978 537.8271 -366.9775 537.833 -366.9741 537.8379 C-366.876 536.3052 -366.3149 535.5952 Y-363.9487 540.3115 -365.3535 542.0039 Y-366.0078 542.7031 -365.3779 544.0239 Yf-363.0103 550.2935 m-363.5083 548.6162 -364.5532 548.7334 V-366.7476 548.5684 -368.499 543.5928 V-367.5254 543.686 -366.2856 544.7979 V-364.4038 545.9824 -363.7808 543.938 Y-363.7783 543.9399 -363.7783 543.9448 -363.7778 543.9497 C-363.4785 542.4443 -362.8262 541.8145 Y-361.1035 546.7993 -362.7207 548.292 Y-363.4609 548.8994 -363.0103 550.2935 Yf-360.9399 554.8755 m-361.7544 555.3789 -361.4917 556.8218 Y-361.7646 555.0898 -362.8159 555.0713 V-364.9678 554.6167 -366.0483 549.4546 V-365.0947 549.6743 -364.0117 550.9395 V-362.3032 552.3638 -361.4175 550.417 Y-361.4141 550.4233 -361.4141 550.4253 -361.4121 550.4321 C-360.9165 548.9785 -360.1899 548.4404 Y-359.1416 553.6084 -360.9399 554.8755 Yf-425.8384 516.4097 m-418.2495 512.0796 -417.7085 514.7905 v-417.188 517.4097 -425.8384 516.4097 Yf-360.9229 567.4668 m-362.3389 567.4668 -363.4878 566.3159 -363.4878 564.9004 c-363.4878 563.4839 -362.3389 562.3354 -360.9229 562.3354 c-359.5049 562.3354 -358.3564 563.4839 -358.3564 564.9004 c-358.3564 566.3159 -359.5049 567.4668 -360.9229 567.4668 cf-379.7334 558.6665 m-383.7881 556.2114 L-377.3604 557.7593 L-379.7334 558.6665 Lf-384.291 568.1284 m-384.3564 569.1807 -384.6318 569.5942 v-384.9067 570.0068 -383.397 570.6504 Y-384.1777 571.0791 L-384.3667 570.7407 L-387.8926 569.5068 L-390.8286 567.0981 L-388.3096 567.9087 L-383.1333 567.2471 L-384.291 568.1284 LfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF